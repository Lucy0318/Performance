*** Settings ***

*** Keywords ***
tel
    [Arguments]    ${command}    @{rest}
    [Documentation]    telnet配置命令行 并返回回显.回显中如果有Error提示，返回执行失败。
    ${rtn}    Execute Command Ex    ${command}    @{rest}
    ${Error}    evaluate    '''${rtn}'''.find('Error')
    run keyword if    ${Error} != -1    FAIL    命令行执行失败！！
    [Return]    ${rtn}

logout_by_https
    Select Frame    id=logoFrame
    sleep    3
    Click Element    id=logoutLink

login_by_https
    [Arguments]    ${ip}    ${username}    ${password}    ${webbrowser}
    Open Browser    https://${ip}    ${webbrowser}
    sleep    5
    Select Frame    id=authFrm
    Clear Element Text    id=userName
    Input Text    id=userName    admin
    Clear Element Text    name=pwd
    Input Password    name=pwd    password
    ${value}    Get Value    name=pwd
    Click Button    name=Submit
    sleep    10
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    This appliance is not registered
    run keyword if    '${result}' == 'PASS'    Click Element    id=regLaterButt
    sleep    5
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    OK to preempt existing administrator?
    run keyword if    '${result}' == 'PASS'    Click Button    name=Continue
    sleep    1
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Handle Alert    action=ACCEPT
    sleep    8
    Unselect Frame
    ${curr_title}    get window titles
    ${title}    Get From List    ${curr_title}    0
    Select Window    title=${title}
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    Click here to log back in
    run keyword if    '${result}' == 'PASS'    run keywords    Click Element    xpath=//*[@href="auth.html"]
    ...    AND    log    Need TWO LOGIN
    ...    AND    twoLogin
    ${a}    Run Keyword And Return Status    Page Should Contain element    id=authFrm
    log    ${a}
    Run keyword if    '${a}'=='False'    run keywords    log    one login
    ...    AND    sleep    5
    ...    AND    Select Frame    name=toggleFrame
    ...    ELSE    run keywords    log    Need TWO LOGIN
    ...    AND    twoLogin

login_by_https_ex
    [Arguments]    ${ip}    ${username}    ${password}    ${webbrowser}
    Open Browser    https://${ip}    ${webbrowser}
    sleep    5
    Select Frame    id=authFrm
    Clear Element Text    id=userName
    Input Text    id=userName    admin
    Clear Element Text    name=pwd
    Input Password    name=pwd    password
    ${value}    Get Value    name=pwd
    Click Button    name=Submit
    sleep    10
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    This appliance is not registered
    run keyword if    '${result}' == 'PASS'    Click Element    id=regLaterButt
    sleep    5
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    OK to preempt existing administrator?
    run keyword if    '${result}' == 'PASS'    Click Button    name=Continue
    Unselect Frame
    sleep    5
    Select Frame    id=authFrm
    Clear Element Text    id=userName
    Input Text    id=userName    admin
    Clear Element Text    name=pwd
    Input Password    name=pwd    password
    ${value}    Get Value    name=pwd
    Click Button    name=Submit
    sleep    10
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    This appliance is not registered
    run keyword if    '${result}' == 'PASS'    Click Element    id=regLaterButt
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    OK to preempt existing administrator?
    run keyword if    '${result}' == 'PASS'    Click Button    name=Continue
    sleep    5

restart_by_https
    Select Frame    id=outlookFrame
    Click Element    id=j1_14_anchor
    sleep    5
    Click Element    id=j1_26_anchor
    sleep    5
    Unselect Frame
    Select Frame    id=tabFrame
    Click Button    Xpath=//input[@class='snwl-btn']
    Handle Alert    action=ACCEPT
    sleep    5
    Page Should Contain    Please wait, the appliance is restarting

Regist_FW_by_https
    [Arguments]    ${email}    ${pwd}
    Unselect Frame
    Select Frame    id=logoFrame
    Click Link    //*[@id='registerLink']
    Unselect Frame
    sleep    20
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    MySonicWall username/email
    : FOR    ${i}    IN RANGE    6
    \    run keyword if    '${result}' == 'FAIL'    click registerLink
    \    sleep    20
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    MySonicWall username/email
    Select Frame    id=tabFrame
    Input Text    name=login    ${email}
    sleep    3
    Input Text    name=pwd    ${pwd}
    sleep    3
    Click Element    name=Submit
    sleep    30
    Capture Page Screenshot
    Comment    Page Should Contain    Registration completed successfully

click registerLink
    Unselect Frame
    Select Frame    id=logoFrame
    Click Link    //*[@id='registerLink']
    Unselect Frame

switch to classic mode
    Select Frame    name=toggleFrame
    Click Element    id=toggleViewBtn
    Unselect Frame

login firewall
    Write    admin
    sleep    1
    Read Until    Password:
    Write    password
    sleep    1
    Set Prompt    >
    Read Until Prompt

login switch
    Write    admin
    sleep    1
    Read Until    Password:
    Write    password

get_native_vlan
    [Arguments]    ${result}    ${item}
    ${result1}    ${pvid}    Should Match Regexp    ${result}    ${item}
    [Return]    ${pvid}

change_native_vlan
    [Arguments]    ${port}    ${vlan1}    ${vlan2}
    tel    interface vlan ${vlan1}
    tel    no untag ${port}
    tel    exit
    tel    interface vlan ${vlan2}
    tel    untag ${port}
    tel    exit

config_port_switchport
    [Arguments]    ${port}
    tel    interface ${port}
    tel    switchport
    tel    no shutdown
    tel    exit

config_native_vlan
    [Arguments]    ${port}    ${vlan}
    tel    interface vlan ${vlan}
    tel    untag ${port}
    tel    tag fo0/12
    tel    no shutdown
    tel    exit

config_tag_port
    [Arguments]    ${port}    ${vlan}
    tel    interface vlan ${vlan}
    tel    tag ${port}
    tel    no shutdown
    tel    exit

exit_to_>
    : FOR    ${i}    INRANGE    9
    \    sleep    1
    \    write    \r
    \    sleep    1
    \    ${rtn}    read
    \    ${a1}=    check_if_contain    ${rtn}    >
    \    Run keyword if    ${a1} == 1    exit for loop
    \    ...    ELSE    write    cancel

CLI-login-firewall
    [Arguments]    ${ip}    ${port}
    [Documentation]    通过串口服务器登陆盒子串口，进入配置模式config(18B1698A2100)#
    Open Connection    ${ip}    port=${port}
    Telnet.Login    root    123456
    write    \r
    sleep    8
    ${rtn}    read
    ${a}=    check_if_contain    ${rtn}    ->
    Run keyword if    ${a} == 1    write_exit_then_login
    ${a}=    check_if_contain    ${rtn}    User:
    Run keyword if    ${a} == 1    login firewall
    ...    ELSE    exit_to_>
    write    configure terminal
    sleep    1
    ${rtn}    read
    ${a}=    check_if_contain    ${rtn}    [no]:
    Run keyword if    ${a} == 1    write    yes
    ...    ELSE    sleep    2
    Set Prompt    \#
    write    \r
    Read Until Prompt

write_exit_then_login
    Write    exit
    sleep    3
    Write    admin
    sleep    1
    Read Until    Password:
    Write    password
    sleep    1
    Set Prompt    >
    Read Until Prompt

CLI-login-switch
    [Arguments]    ${ip}    ${port}
    [Documentation]    通过串口服务器登陆盒子串口，进入配置模式config(18B1698A2100)#
    Open Connection    ${ip}    port=${port}
    Telnet.Login    root    123456
    write    \r
    sleep    5
    ${rtn}    read
    log    ${rtn}
    ${a}    check_if_contain    ${rtn}    Perf-S3148-1>
    Run keyword if    ${a} == 1    write    enable
    sleep    5
    write    end
    sleep    1
    read
    Set Prompt    \#
    write    configure terminal
    Read Until Prompt

Telnet-login-switch
    [Arguments]    ${ip}
    [Documentation]    通过串口服务器登陆盒子串口，进入配置模式config(18B1698A2100)#
    Open Connection    ${ip}    port=23
    Telnet.Login    admin    password    login_prompt=Login:
    Set Prompt    \#
    write    configure terminal
    Read Until Prompt

CLI-config_wan_ip
    [Arguments]    ${port}    ${ip}    ${mask}    ${gateway}
    [Documentation]    配置wan侧的ip地址，网关，使盒子可以网页访问
    tel    interface ${port}
    tel    ip-assignment WAN static
    tel    ip ${ip} netmask ${mask}
    tel    gateway ${gateway}
    tel    dns primary 10.190.202.200
    tel    commit
    tel    exit
    tel    management https
    tel    management ping
    tel    commit
    tel    exit

CLI-Factory-Restore
    [Arguments]    ${sleep_time}
    [Documentation]    恢复出厂配置
    Write    restore-defaults
    sleep    1
    Set Prompt    [cancel]:
    sleep    1
    Read Until Prompt
    Write    yes
    sleep    ${sleep_time}

CLI-config-Test-LAN
    [Arguments]    ${port}    ${ip}    ${mask}
    tel    interface ${port}
    tel    ip-assignment LAN static
    tel    ip ${ip} netmask ${mask}
    tel    commit
    tel    exit
    tel    management ping
    tel    commit
    tel    exit

CLI-config-Test-WAN
    [Arguments]    ${port}    ${ip}    ${mask}
    tel    interface ${port}
    tel    ip-assignment WAN static
    tel    ip ${ip} netmask ${mask}
    tel    commit
    tel    exit
    tel    management ping
    tel    commit
    tel    exit

CLI-WAN-to-LAN Allow
    tel    no access-rule from WAN to LAN action deny
    tel    commit
    tel    access-rule from WAN to LAN action allow
    tel    commit
    sleep    1
    Comment    write    \ \r
    Comment    sleep    1
    tel    exit

CLI-logout
    write    exit
    sleep    1
    write    exit
    sleep    1

choose group id
    [Arguments]    ${list}
    log to console    Group id is being used ,should change another one!!
    : FOR    ${index}    IN RANGE    1    13
    \    ${i}    evaluate    '${index}' in ${list}
    \    ${i}    evaluate    not ${i}
    \    Exit For Loop If    ${i}
    Set Suite Variable    ${group}    ${index}

check test status
    [Arguments]    ${run_id1}
    ${progress}=    Set Variable    0
    : FOR    ${index}    IN RANGE    100
    \    ${progress}    getRTS    ${run_id1}
    \    Exit For Loop If    ${progress} ==100
    \    Sleep    15
    Run Keyword IF    ${progress} ==100    Log To Console    Test Finished!
    ...    ELSE    FAIL    Execution timeout！！

BpFileChangeFramelSize_2ports
    [Arguments]    ${length}
    viewNormalTest    enableRequestPrints=true
    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=sizeDist    paramId=min    Value=${length}
    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=sizeDist    paramId=max    Value=${length}
    sleep    1
    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=duration    paramId=durationTime    Value=00:10:00
    Comment    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=duration    paramId=durationFrames    Value=0

BpFileChangeFramelSize_4ports
    [Arguments]    ${length}
    viewNormalTest    enableRequestPrints=true
    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=sizeDist    paramId=min    Value=${length}
    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=sizeDist    paramId=max    Value=${length}
    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=duration    paramId=durationTime    Value=00:10:00
    Comment    modifyNormalTest2    componentId=routingrobot_10G_1    elementId=duration    paramId=durationFrames    Value=0
    sleep    5
    modifyNormalTest2    componentId=routingrobot_10G_2    elementId=sizeDist    paramId=min    Value=${length}
    modifyNormalTest2    componentId=routingrobot_10G_2    elementId=sizeDist    paramId=max    Value=${length}
    modifyNormalTest2    componentId=routingrobot_10G_2    elementId=duration    paramId=durationTime    Value=00:10:00
    Comment    modifyNormalTest2    componentId=routingrobot_10G_2    elementId=duration    paramId=durationFrames    Value=0

download firewall version and reboot with factory-default
    [Arguments]    ${username}    ${password}    ${ip}    ${file}    ${time}
    write    import firmware ftp ftp://${username}:${password}@${ip}/${file}
    sleep    20
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    read until    uploaded successfully
    : FOR    ${i}    IN RANGE    10
    \    run keyword if    '${result}' == 'FAIL'    sleep    20
    \    EXIT for loop if    '${result}' == 'PASS'
    \    ${result}    ${returnvalue}    Run Keyword And Ignore Error    read until    uploaded successfully
    run keyword if    '${result}' == 'FAIL'    FAIL    download version fail ,timeout!!
    Write    boot uploaded factory-default
    sleep    1
    Set Prompt    [cancel]:
    sleep    1
    Read Until Prompt
    Write    yes
    sleep    ${time}

boot current factory-default
    [Arguments]    ${time}
    write    boot current factory-default
    sleep    1
    Set Prompt    [cancel]:
    sleep    1
    Read Until Prompt
    Write    yes
    sleep    ${time}
    log to console    same version ,no need download !

BP_ReservePorts
    [Arguments]    ${slot}    ${group}    @{ports}
    : FOR    ${index}    IN    @{ports}
    \    @{list}    create list    ${index}
    \    ReservePorts    slot=${slot}    portList=@{list}    group=${group}    force=true
    \    sleep    10

config_failover-lb_interface
    [Arguments]    ${interface}
    tel    failover-lb
    tel    group " Default LB Group"
    tel    interface ${interface}
    tel    rank 1
    tel    commit
    tel    exit
    tel    no interface X1
    tel    commit
    tel    exit
    tel    end

CLI-MAX-DPI-Connections
    [Arguments]    ${time}
    [Documentation]    Switch to Max DPI Connections from Console
    tel    firewall
    tel    connections optimized
    Write    commit
    Set Prompt    [cancel]:
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Read Until Prompt
    run keyword if    '${result}' == 'PASS'    write yes and sleep    ${time}

CLI-MAX-SPI-Connections
    [Arguments]    ${time}
    [Documentation]    Switch to Max DPI Connections from Console
    tel    firewall
    tel    connections highest
    Write    commit
    Set Prompt    [cancel]:
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Read Until Prompt
    run keyword if    '${result}' == 'PASS'    write yes and sleep    ${time}

write yes and sleep
    [Arguments]    ${time}
    Write    yes
    sleep    ${time}

CLI-security maximum
    tel    security-services
    tel    security maximum
    tel    commit
    tel    exit

CLI-Performance Optimized
    tel    security-services
    tel    security performance-optimized
    tel    commit
    tel    exit

CLI-Enable-IPS
    tel    intrusion-prevention
    tel    enable
    tel    signature-group high-priority detect-all
    tel    signature-group high-priority prevent-all
    tel    signature-group medium-priority detect-all
    tel    signature-group medium-priority prevent-all
    tel    signature-group low-priority detect-all
    tel    commit
    tel    exit

CLI-Disable-IPS
    tel    intrusion-prevention
    tel    no enable
    tel    no signature-group high-priority detect-all
    tel    no signature-group high-priority prevent-all
    tel    no signature-group medium-priority detect-all
    tel    no signature-group medium-priority prevent-all
    tel    no signature-group low-priority detect-all
    tel    commit
    tel    exit

CLI-Enable-GAV
    tel    gateway-antivirus
    tel    enable
    tel    commit
    tel    exit

CLI-Disable-GAV
    tel    gateway-antivirus
    tel    no enable
    tel    commit
    tel    exit

CLI-Enable-AntiSpyware
    tel    anti-spyware
    tel    enable
    tel    signature-group high-danger detect-all
    tel    signature-group high-danger prevent-all
    tel    signature-group medium-danger detect-all
    tel    signature-group medium-danger prevent-all
    tel    signature-group low-danger detect-all
    tel    commit
    tel    exit

CLI-Disable-AntiSpyware
    tel    anti-spyware
    tel    no enable
    tel    no signature-group high-danger detect-all
    tel    no signature-group high-danger prevent-all
    tel    no signature-group medium-danger detect-all
    tel    no signature-group medium-danger prevent-all
    tel    no signature-group low-danger detect-all
    tel    commit
    tel    exit

Get bp-to-switchportslist
    [Arguments]    ${slot}    ${port}    @{excel}
    : FOR    ${i}    IN    @{excel}
    \    ${bpslot}    evaluate    int(${i["SLOT"]})
    \    ${bpport}    evaluate    int(${i["PORT"]})
    \    ${ports}    set variable if    ${bpslot} == ${slot} and ${bpport} == ${port}    ${i["SWITCH_PORT"]}
    \    exit for loop if    ${bpslot} == ${slot} and ${bpport} == ${port}
    [Return]    ${ports}

config S60
    [Arguments]    ${type}
    ###telnet登陆S60###
    @{data}=    read xls file    topology.xlsx    ${type}
    Telnet-login-switch    ${data[0]["S60_IP"]}
    ###配置 S60 PortS###
    log to console    config S60 ports!
    : FOR    ${i}    IN    @{data}
    \    config_port_switchport    ${i["UNTAG"]}
    \    ${vlan}    evaluate    int(${i["VLAN"]})
    \    write    no interface vlan ${vlan}
    \    Read Until Prompt
    \    ${result}    tel    do show interfaces switchport ${i["UNTAG"]}
    \    ${nativlan_id}    get_native_vlan    ${result}    U\\s+(\\d+)
    \    run keyword if    ${nativlan_id} == ${vlan}    log    the port has already configed
    \    ...    ELSE IF    ${nativlan_id} == 1    config_native_vlan    ${i["UNTAG"]}    ${vlan}
    \    ...    ELSE    change_native_vlan    ${i["UNTAG"]}    ${nativlan_id}    ${vlan}
    \    config_tag_port    Te 0/48    ${vlan}
    log to console    finish config S60 switch!

config S3148
    [Arguments]    ${type}
    ###串口登陆3148###
    @{data}=    read xls file    topology.xlsx    ${type}
    ${consoleserver_port}    evaluate    ${data[0]["3148-CONSOLEPORT"]}
    CLI-login-switch    ${data[0]["3148-CONSOLE_SERVER"]}    ${consoleserver_port}
    ###配置 3148 PortS###
    log to console    config 3148 ports!
    : FOR    ${i}    IN    @{data}
    \    config_port_switchport    ${i["UNTAG"]}
    \    ${vlan}    evaluate    int(${i["VLAN"]})
    \    write    no interface vlan ${vlan}
    \    sleep    1
    \    Read Until Prompt
    \    ${result}    tel    do show interfaces switchport ${i["UNTAG"]}
    \    ${nativlan_id}    get_native_vlan    ${result}    U\\s+(\\d+)
    \    run keyword if    ${nativlan_id} == ${vlan}    log    the port has already configed
    \    ...    ELSE IF    ${nativlan_id} == 1    config_native_vlan    ${i["UNTAG"]}    ${vlan}
    \    ...    ELSE    change_native_vlan    ${i["UNTAG"]}    ${nativlan_id}    ${vlan}
    \    config_tag_port    Te 1/49    ${vlan}
    log to console    finish config 3148 switch!

ForIxnetwork
    [Arguments]    ${handel}
    : FOR    ${index}    IN RANGE    30
    \    ${testResult}=    getQuickTestCurrentAction    ${handel}
    \    log    ${testResult}
    \    Exit For Loop If    '${testResult}' == 'TestEnded'
    \    Sleep    20

get_routes_num
    [Arguments]    ${type}
    turn_to_classicMode    ${type}
    Unselect Frame
    Select Frame    id=outlookFrame
    Click element    xpath=//*[@href="netInterfaces.html"]
    sleep    2
    ###查看IPv4 route的结果并删除###
    Click element    xpath=//*[@href="newRoutePolicies.html"]
    sleep    10
    Unselect Frame
    Select Frame    id=tabFrame
    Click element    //*[@id="pbrFolder_trigger"]
    sleep    10
    ${route_ipv4_total}    get element attribute    xpath=//*/span[5]/span    title
    Capture Page Screenshot
    sleep    10
    ${actual_route_ipv4}    evaluate    '${route_ipv4_total}'.split(' ')[0]
    ${routes_ipv4_num}    trans_to_int    ${actual_route_ipv4}
    [Teardown]    close browser
    [Return]    ${routes_ipv4_num}

twoLogin
    Select Frame    id=authFrm
    Clear Element Text    id=userName
    Input Text    id=userName    admin
    Clear Element Text    name=pwd
    Input Password    name=pwd    password
    ${value}    Get Value    name=pwd
    Click Button    name=Submit
    sleep    10
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    This appliance is not registered
    run keyword if    '${result}' == 'PASS'    Click Element    id=regLaterButt
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    OK to preempt existing administrator?
    run keyword if    '${result}' == 'PASS'    Click Button    name=Continue
    sleep    1
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Handle Alert    action=ACCEPT
    sleep    1

turn_to_classicMode
    [Arguments]    ${type}
    ###获取盒子相关数据##
    ${host_ip}    ${console_ip}    ${console_port}    get_ip_port    ${type}
    login_by_https    ${host_ip}    admin    password    firefox
    Unselect Frame
    sleep    12
    Select Frame    name=toggleFrame
    sleep    2
    click element    xpath=//div//*[@id="toggleViewBtn"]
    sleep    10

get_ip_port
    [Arguments]    ${type}
    ###获取盒子IP##
    @{data}=    read xls file    topology.xlsx    ${type}
    ${host_ip}    set variable    ${data[0]["HOST_IP"]}
    ${consoleserver_ip}    set variable    ${data[0]["CONSOLE_SERVER"]}
    ${consoleserver_port}    evaluate    int(${data[0]["CONSOLE_TELNETPORT"]})
    [Return]    ${host_ip}    ${consoleserver_ip}    ${consoleserver_port}

login_by_https_TLS
    [Arguments]    ${ip}    ${username}    ${password}    ${webbrowser}
    Open Browser    https://${ip}    ${webbrowser}
    sleep    5
    Select Frame    id=authFrm
    Clear Element Text    id=userName
    Input Text    id=userName    admin
    Clear Element Text    name=pwd
    Input Password    name=pwd    password
    ${value}    Get Value    name=pwd
    Click Button    name=Submit
    sleep    10
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    This appliance is not registered
    run keyword if    '${result}' == 'PASS'    Click Element    id=regLaterButt
    sleep    5
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Page Should Contain    OK to preempt existing administrator?
    run keyword if    '${result}' == 'PASS'    Click Button    name=Continue
    sleep    1
    ${result}    ${returnvalue}    Run Keyword And Ignore Error    Handle Alert    action=ACCEPT
    sleep    10
    Unselect Frame
    ${curr_title}    get window titles
    ${title}    Get From List    ${curr_title}    0
    Select Window    title=${title}
    ${a}    Run Keyword And Return Status    Page Should Contain element    id=authFrm
    log    ${a}
    Run keyword if    '${a}'=='False'    run keywords    log    one login
    ...    AND    Select Frame    name=toggleFrame
    ...    ELSE    run keywords    log    Need TWO LOGIN
    ...    AND    twoLogin

trans_to_int
    [Arguments]    ${text}
    ${value}=    check_if_contain    ${text}    ,
    ${actual_result1}    set variable    1
    ${actual_result}    run keyword if    ${value}==1    evaluate_for_if    ${actual_result1}    '${text}'.replace(',','')
    ...    ELSE    evaluate_for_if    ${actual_result1}    ${text}
    [Return]    ${actual_result}

evaluate_for_if
    [Arguments]    ${text1}    ${text2}
    ${text1}    evaluate    ${text2}
    [Return]    ${text1}

config_ospf
    [Arguments]    ${type}    ${interface}
    ###获取盒子相关数据##
    @{data}=    read xls file    topology.xlsx    ${type}
    ${consoleserver_port}    evaluate    int(${data[0]["CONSOLE_TELNETPORT"]})
    ###串口下完成测试相关配置####
    CLI-login-firewall    ${data[0]["CONSOLE_SERVER"]}    ${consoleserver_port}
    Telnet.write    multicast
    sleep    2
    Telnet.write    reception all
    sleep    2
    Telnet.write    commit
    sleep    5
    Telnet.write    exit
    Telnet.write    interface ${interface}
    sleep    1
    Telnet.write    management ping
    Telnet.write    multicast
    Telnet.write    ip-assignment LAN static
    Telnet.write    ip 2.1.1.1 netmask 255.0.0.0
    Telnet.write    commit
    sleep    20
    Telnet.write    exit
    sleep    1
    Telnet.write    exit
    sleep    2
    Telnet.write    routing
    sleep    1
    Telnet.write    mode advanced
    Telnet.write    commit
    sleep    5
    Telnet.write    ospf
    Telnet.write    configure terminal
    Telnet.write    router ospf
    Telnet.write    network 2.0.0.0/8 area 0
    Telnet.write    end
    Telnet.write    exit
    Telnet.write    exit
    Telnet.write    exit
    Telnet.close connection

get_ospf_result
    [Arguments]    ${type}
    ###Get Current Dynamic Routes###
    ${routes_ipv4_num}    get routes num    ${type}
    log to console    Max ospf routes supported =${routes_ipv4_num}
    ###Get CPU Utilization###
    @{data}=    read xls file    topology.xlsx    ${type}
    ${consoleserver_port}    evaluate    int(${data[0]["CONSOLE_TELNETPORT"]})
    CLI-login-firewall    ${data[0]["CONSOLE_SERVER"]}    ${consoleserver_port}
    Telnet.write    diag show multicore
    sleep    3
    ${rtn}    Telnet.read
    log to console    ${rtn}
    Telnet.close connection
    [Return]    ${routes_ipv4_num}    ${rtn}

run_ospf_withIxnetwork
    [Arguments]    ${jsonConfigFile1}
    # Extending the main ${ixnObj} object to all the instantiated classes
    log to console    Start test!!!
    ${ixnObj} =    ixnObj.getSelfObject
    portMgmtObj.setMainObject    ${ixnObj}
    fileMgmtObj.setMainObject    ${ixnObj}
    protocolObj.setMainObject    ${ixnObj}
    trafficObj.setMainObject    ${ixnObj}
    statisticObj.setMainObject    ${ixnObj}
    Log To Console    Connecting to chassis ...
    portMgmtObj.Connect Ix Chassis    ${ixChassisIp}
    # Verify if ports are available. Take over if forceTakePortOwnership == True
    ${result} =    portMgmtObj.Are Ports Available    portList=${portList}    raiseException=${False}
    Run Keyword If    ("${result}"!=0) and ("${forceTakePortOwnership}"=="True")    Run Keywords    portMgmtObj.Release Ports    ${portList}
    ...    AND    portMgmtObj.Clear Port Ownership    ${portList}
    ...    ELSE    Fail    Ports are still owned
    ${jsonData} =    fileMgmtObj.Json Read Config    ${jsonConfigFile1}
    Log To Console    Loading JSON config file to API server
    ${newConfig}    Evaluate    str('newConfig')
    fileMgmtObj.Import Json Config File    jsonFileName=${jsonConfigFile1}    option=${newConfig}
    Log To Console    Assigning ports
    ${assignPortTimeout} =    Convert To Integer    300
    Log To Console    Start all protocols
    protocolObj.Start All Protocols
    sleep    30
    trafficObj.Start Traffic
    sleep    40
    Log To Console    Verifying protocol sessions

get_ospf_target
    [Arguments]    ${type}
    ###获取TSR product数据###
    @{data}=    read xls file    topology.xlsx    ${type}
    ${consoleserver_port}    evaluate    int(${data[0]["CONSOLE_TELNETPORT"]})
    CLI-login-firewall    ${data[0]["CONSOLE_SERVER"]}    ${consoleserver_port}
    ${tsr}    Execute Command showALL    show tech-support-report product
    sleep    20
    log    ${tsr}
    ${max_dynamicRoutes}    get tsr value    ${tsr}    Max Dynamic Routes:\\s+(\\d+)
    log to console    MAX DYNAMIC ROUTES=${max_dynamicRoutes}
    Telnet.close connection
    [Return]    ${max_dynamicRoutes}

get_tsr_value
    [Arguments]    ${result}    ${item}
    ${result1}    ${pvid}    Should Match Regexp    ${result}    ${item}
    [Return]    ${pvid}

config_S6000-2
    [Arguments]    ${SwitchPorList}    ${vlan}    ${port-channel}
    Telnet-login-switch    10.7.20.22
    :FOR    ${i}    IN    @{SwitchPorList}
    \    log to console    ${i}
    \    config_tag_port    ${i}    ${vlan}
    \    config_tag_port    ${port-channel}    ${vlan}
